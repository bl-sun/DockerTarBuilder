name: Pull Docker Images and Package
on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: Image name, can be multiple image names separated by ','
        required: true
        default: 'alpine:latest,ubuntu:latest'
      arch:
        description: Platform of the images to pull
        required: true
        default: amd64
        type: choice
        options:
          - amd64
          - arm64
          - arm32
      compressor:
        description: Select the compression tool to use
        required: true
        default: .tar
        type: choice
        options:
          - .tar
          - .tar.gz
          - .tar.gx
      release:
        description: Weather to publish the images to release for persistent store
        required: true
        type: boolean
        default: false

jobs:
  pull_and_package:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clean up Docker to free space
      run: |
          docker system prune -a -f
          docker volume prune -f

    - name: Pull Docker Images and Package
      run: |
        platform=${{ github.event.inputs.arch }}
        if [[ $platform == 'arm32' ]]; then platform="arm/v7"; fi
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        for image in "${image_array[@]}"; do
          # trim the prefix or suffix spaces, can also use image=$(echo $image | xargs)
          # see also https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable
          image=$(echo $image)
          image_filename=$(echo $image | sed -e 's/\//_/g' -e 's/:/-/g' -e 's/\\/_/g')
          docker pull "${image}" --platform "linux/${{ github.event.inputs.arch }}"
          docker save "${image}" -o "${image_filename}-${{ github.event.inputs.arch }}.tar"
        done

    - name: Compress the saved docker images
      run: |
        compressor=${{ github.event.inputs.compressor }}
        if [[ $compressor == '.tar.xz' ]]; then
          tar -cJf ${{ github.event.inputs.arch }}-images.tar.xz *-${{ github.event.inputs.arch }}.tar
        elif [[ $compressor == '.tar.gz' ]]; then
          tar -zcf ${{ github.event.inputs.arch }}-images.tar.gz *-${{ github.event.inputs.arch }}.tar
        fi
        ls -lah .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.arch }}-docker-images
        path: ${{ github.event.inputs.arch }}-images${{ github.event.inputs.compressor }}
        retention-days: 30 # retained for 30 days
        compression-level: 0 # no compression for the xz compress file

    - name: Compress each images for release
      if:  ${{ inputs.release }}
      run: |
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        for image in "${image_array[@]}"; do
          image=$(echo $image)
          image_filename=$(echo $image | sed -e 's/\//_/g' -e 's/:/-/g' -e 's/\\/_/g')
          tar -cJf "${image_filename}-${{ github.event.inputs.arch }}.tar.xz" "${image_filename}-${{ github.event.inputs.arch }}.tar"
        done
        ls -lah .

    - name: Upload to release
      uses: softprops/action-gh-release@v1
      if:  ${{ inputs.release }}
      with:
        files: "*-${{ github.event.inputs.arch }}.tar.xz"
        tag_name: images
        release_name: images
